#summary Compte-rendu de la réunion du 10/02/2011

Date : Jeudi 10/02/2011<br/>
Durée : 14h - 16h30

= Participants =

MOA :
  * M. Bourret

MOE :
  * Yoann Buch
  * Wenshao Low
  * Cheng Luo
  * Stéphane Seng
  * Yi Quan Zhou

= Points abordés =

  # Présentation du nouveau schéma d'architecture ;
  # Entreprise Serial Bus (ESB) et Service-Oriented Architecture (SOA) ;
  # Scénario 1 : Enregistrement des positions ;
  # Scénario 3 : Injection de documents ;
  # Scénario 4 : Service de notification ;
  # Réponses aux questions de la MOE ;
  # Réflexion sur l'identification des utilisateurs.

= 1. Présentation du nouveau schéma d'architecture =

Le module Profil est à renommer : Il s'agit d'un *service frontal*.<br/>
Il ne fait que des redirections pour l'instant : demain, on ne sait pas ce qu'il pourra faire, d'où l'*utilité d'utiliser un ESB.

= 2. Entreprise Serial Bus (ESB) et Service-Oriented Architecture (SOA) =

== 2.1. Problématique ==

Au départ, les SI étaient structurés en plusieurs couches (Présentation, Service, Persistance), chacune des couches ne pouvant communiquer qu'avec les couches connexes uniquement : *développement multi-couches (N-tiers)*.<br/>
De plus, questions pour normaliser les couches de présentation (batch, Appli Web, UI...) -> Apparition des *services Web*, ou Web Services (WS).

Il existe un autre point de vue avec lequel les applications existent déjà, regroupées dans des Silots Applicatifs Métiers (SAM). On a alors la création d'applications Web qui vont faire les communications entre les SAM, via des WS -> *Plat de spagetthis*.

Fausse bonne idée : faire des WS CRUD -> *Accentuation du plat de spagetthis*.

== 2.2. Présentation des ESB ==

La solution qui est proposée pour résoudre les problèmes de communication est l'utilisation des ESB.

*ESB = Couche de médiation, de transformation et d'adaptation.*<br/>
*Règle : Pas de métier dans les ESB. Si on enlève l'ESB, aucune partie métier ne doit être perdue.*

|| Schéma ||
Exemple :

Protocole applicatif du client :
{{{
<xml>
 <user></user>
 <produit></produit>
</xml>
}}}

↓ Services Publics : CXF - Biding Components<br/>
↓ ESB : XSLT - Service Engine<br/>
↓ Services Privés : CXF - Biding Components<br/>

Protocole applicatif d'un SAM :
{{{
<xml>
 <user></user>
</xml>
}}}

L'ESB réalise une *chorégraphie des services* : qu'est ce qui doit être appelé avant, après. Connaît l'enchainement des processus. Peut également faire des transformation de protocoles techniques (REST -> CSV par exemple).

Remarque : La configuration de l'ESB à spécifier.

== 2.3. Solutions existantes ==

Solutions Software :

  * Open Source :
   * ServiceMix/FuseESB ;
   * Petals ;
   * OpenESB ;
   * JBoss ESB ;
  * Propriétaire :
   * OSB Oracle ;
   * Websphere SOA IBM ;

Solutions Hardware :

   * Datapower IBM (optimisation totale).

API : 
  * CAMEL (Apache) Approche Ressource utilisé dans ServiceMix ;
  * Spring Integration Approche Bean (ne pas utiliser).

== 2.4. Cas de notre projet ==

*Intérêt d'utiliser ServiceMix 4.2/FuseESB 4.3 dans le projet.*
Intégration : Faire l'intégration avec le service frontal comme spécifié puis remplacer ce service par une passerelle (retransmet sans faire de modifications) puis par un ESB complet.

= 3. Scénario 1 : Enregistrement des positions =

== 3.1. Englobement des zones ==

L'idée de l'englobement des zones a été acceptée.

Par exemple :

  * Lyon (niveau 10) ;
  * Villeurbanne (niveau 20) ;
  * INSA (niveau 30) ;
  * IF (niveau 40).

Quand l'utilisateur fait une requête, on ne garde que la zone qui a le niveau le plus bas.

== 3.2. Chevauchement des zones ==

Désaccord sur le chevauchement. Idée d'origine : on ne permet pas le chevauchement des zones sur un même niveau et on définit des niveaux spéciaux (pour les autoroutes par exemple) pour permettre un chevauchement de 2 zones.

Idée MOA : On va plutôt définir et conserver pour chaque zone un *centre d'intérêt* (Zone : nom/identifiant + centre d'intérêt).
Retour des requêtes sur le module Zone : n zones, 1 zone par centre d'intérêt, la plus englobée dans chaque centre d'intérêt.
Plusieurs centres d'intérêts de zones : commercial, ville, etc.

De plus, si un évènement arrive, peut être rattaché à plusieurs zones.
Utilisateur : proposer les catégories qui l'intéresse

Zones découpées par centres d'intérêt : plusieurs découpages par ville.
On connait déjà les centres d'intérêts des documents à partir des sources.

== 3.3. Exemple de calcul des habitudes ==

Habitudes :
  * Lyon 100% 10 ;
  * Arrondissement 3 60% 20 ;
  * Part-Dieu 65% ;
  * Perrache 5% ;
  * A1 7%.

Seuil : 50% ;

Utilisation des englobements :
  * Arrondissement 3 60% ;
  * Part-Dieu 65% ;

Paramètres passés à Indexation : A3 | Part-Dieu et (H, H+1)
Renvoi : document CIVille, CICommercial.

Indexation : Si on sait que le document est Commercial, chercher les zones qui sont commerciales.

Stocker les deux zones (CIVille, CICommercial voire d'autres CI) dans la BD Habitudes.

*L'engloblement peut être calculé automatiquement avec SGBDGeo.*<br/>
* Envoyer les centres d'intérêts avec la requête du client.*

+ Système de MaJ avec la répartition des pondérations sur les nouvelles sous-zones.

Remarques :

  * La somme des probabilités de présence pour les zones d'un centre d'intérêt est de 100% ;
  * Le filtrage par les seuils pourra être remplacé par un filtrage "n plus probables par catégorie" ;
  * On gardera quand même un petit filtrage (on accepte pas les 2 % par exemple).
  * Le filtrage des englobements sera fait par le module Zone.

== 3.4. Centres d'intérêts et catégories des documents ==

Lors de la phase d’agrégation, on force la catégorie d'un document.
Au final, Zone : Nom et Document : Texte, intervalle, zones (selon les centres d'intérêts).
-> 1 document avec une seule catégorie et 1 zone avec 1 catégorie.
Possibilité d'avoir des documents dans 2 catégories, pas trop sinon inutile.

== 3.5. Précisions sur les BDD Décisionnelles ==

Stocker pour le Brut : fichier brut, pas de problème.
Requêtage : Précalcul des habitudes des utilisateurs *toutes les nuits* + historisation (pas de calcul sur 1 an -> 1 mois ou 2 mois)
-> voir si existe des solutions libres...
-> Demander à Miquel et a Tchounikine

Limite stockage sur 2 semaines si vraies habitudes.

---

= Scénario 3 : Injection de documents =

Thésaurus, avec les zones ou longitude, latitude (via un batch de lancement).
Ajouter dans spécifications : + Coordonnées des lieux-dits.
Recherche sur les zones avec mots-clés et adresses -> voir si matching avec une seule zone.

! Filtrage des faux-positifs en utilisant la catégorie des zones selon la catégorie du document.
Idée : éliminer le plus possible en amont.

Scénario 4 :
************

Notification.
Evènement urgent : flag sur les documents, possibilité de flagger par l'administrateur.

Service frontal.


Questions :
***********

Garder URI.
Donner dates dans l'IHM.
DOnner zone ?
Onglets avec catégories dépendent du paramètrage.

Requête : Requête seulement si pas beaucoup de déplacement pour le service (Différence position initiale, position finale)...
Fréquence temps + Différence.
Problème changement de zones : Distance zone >> Distance seuil non envoi.

Si arrêt du service et déconnexion, envoi message pour finir l'habitude pour finir la plage de donnée calculée.

Système non fait pour beaucoup de documents, pas besoin de beaucoup d'informations.

Plus, ajout d'un seuil en plus du "n plus probables".
Pas de coulage avec l'ancien Inpr@net.


Comment savoir quels documents à envoyer pour un client :
"Je sais les documents que tu as déjà" -> Cache par utilisateur.

Catégorie # Centre d'intérêt
Centres d'affaires

Comment calculer l'ID ?

Essayer de trouver un découpage administratif, etc; de Lyon, voir si format pour importer dans le système.


Semaine prochaine :
*******************

Spéc. fonctionnelles à finaliser.
Définir les tâches de développement pour la semaine prochaine.
Spéc techniques à faire après le développement.

Stocker en plus dans le module Profil les catégories pour optimiser.


User/Password :
***************

Profil : login, password, centres d'intérêt.
Trouver un système de cryptage bijectif.

Mobile : User + Password -> SHA (clé) -> Password crypté stocké dans GeoHabit.
! Clé SHA injectif (# surjectif) -> on ne peut pls revenir au password initial et unique.
Stocké en local.

Communication : Password crypté + cryptage en plus par un système bijectif qui va inclure la date et l'heure courante).
+ date en clair.

Système : Cryptage + Date -> Retrouve le password crypté.

C'est plus simple, pas de priorité au cryptage...

OU

S	M
<user+password
	idSession>

<idSession
<...

Au démarrage : envoi du login + password crypté (SHA avec 1 clé)
Suite authentification (serveur)
Retourne ID session.
Pour toute requête, que ID session.
Côté serveur, garde mapping ID session <-> ID Session.

(Fonctionnement des serveurs d'appli TomCat).

Profil : Création compte
Authentification
IDSessions sur le schéma


ID :
****

Parler de centres d'intérêts.