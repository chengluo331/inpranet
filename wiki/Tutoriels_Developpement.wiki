#summary Liste de tutoriels qui seront utiles dans le cadre de ce projet

=Création d'un web service à partir d'une classe Java=

 * http://www.youtube.com/watch?v=o2Vjs8ylmFM&feature=related
 * http://www.ibm.com/developerworks/library/ws-pojo-springcxf/      En complement du tuto youtube
 * http://www.eclipse.org/webtools/community/education/web/t320/Implementing_a_Simple_Web_Service.pdf
 * http://www.eclipse.org/webtools/jst/components/ws/M4/tutorials/WebServiceExplorer.html

Procédure :
 # Créer un Dynamic Web Project ;
 # Ajouter/Créer des classes Java;
 # Créer un Web Service avec Eclipse. 
   * New -> Web Service,
   * Choisir la classe pour service implementation
   * Choisir start service et ne créer pas de client. Ce niveau permet de générer le WSDL. On testera notre WS avec SoapUI. Cocher la case monitor the WS et non pas publish. Nous allons plus tard créer une classe qui permet de publier le WS.
   * Indiquer ou créer le SEI.
   * Finish
 # Publier le WS 
   Endpoint.publish("http://localhost:9999/serviceXX", new ServiceImpl());
 # Tester le WS avec SoapUI
   New project -> click droit sur le projet -> add wsdl -> charger le fichier wsdl à tester -> une fenêtre contenant la requête apparait

 * Explication des fichiers xml généré:  http://www.ibm.com/developerworks/webservices/library/ws-pojo-springcxf/

=Utilisation Postgres=

 * Apres les étapes de l'installation, connecter sur la base de données en tant que superutilsateur (cad pas de username et mot de passe défini lors de l'installation). 
 * http://www.postgresql.org/docs/manuals/


=Utilisation PostGIS=

 * http://tokumine.com/postgis/

=Hibernate=

 * http://docs.jboss.org/hibernate/core/3.3/reference/en/html/tutorial.html
 * http://www.laliluna.de/articles/first-hibernate-example-tutorial.html
 * http://www.roseindia.net/hibernate/index.shtml
 * http://facestutorials.icefaces.org/tutorial/hibernate-tutorial.html#stepfour

 A propos du mappings, deux type de mappings sont possibles: xml ou annotation. On utilise plutôt les annotations comme ce qu'on a fait en 3IF avec TopLink
 * http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/

= Maven/Spring/Hibernate =

Utiliser le marketplace d'Eclipse pour installer Maven + les aides dans l'autre page du wiki concernant Maven*

 * [http://blog.netapsys.fr/index.php/post/2008/04/13/Introduction-A-Spring-MVC maven + spring]
 * [http://www.mkyong.com/spring/maven-spring-hibernate-annotation-mysql-example/ maven + spring + hibernate]
 * http://www.laliluna.de/articles/eclipse-spring-jdbc-tutorial-en.html
 * http://www.laliluna.de/articles/first-hibernate-example-tutorial.html
 * [http://www.objis.com/formation-java/tutoriel-web-services-integration-cxf-spring-maven.html CXF + Spring + maven]
 * [http://bdoughan.blogspot.com/2010/08/creating-restful-web-service-part-15.html rest mapping xml/json]
 * [http://sushantworld.wordpress.com/2011/01/23/apache-cxf-restful-web-service/ cxf rest]

= CXF =

== Simuler requete depuis commande ==

Utiliser l'utilitaire *curl*

Exemple de requete :
curl.exe --header "content-type: application/json" --data @req.json  -X POST http://localhost:8080/inpranet/services/geo

avec @req.json un fichier :
{{{
{
	"geopos":
	{
		"longitude": 2,
		"latitude" : 3,
		"time" : 4
	}
}
}}}

[http://docs.jboss.org/resteasy/docs/1.0.1.GA/userguide/html/Content_Marshalling_Providers.html#JAXB_+_JSON_provider JAXB + JSON Provider]